// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  password            String
  firstName           String
  lastName            String
  role                String         @default("USER") // ADMIN, USER, MANAGER
  isActive            Boolean        @default(true)
  
  // Plant Assignment - User kann nur auf zugewiesene Anlage zugreifen
  assignedPlant       String?        // T208, T207, T700, T46, oder null für Admin/alle
  
  // User Approval Workflow
  approvalStatus      String         @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedBy          String?
  approvedByUser      User?          @relation("UserApprovals", fields: [approvedBy], references: [id], onDelete: SetNull)
  approvedAt          DateTime?
  rejectionReason     String?
  
  // QR-Code Login (Mobile)
  qrToken             String?        @unique // Unique token für QR-Code Login
  qrTokenCreatedAt    DateTime?      // Wann wurde der QR-Code generiert
  qrTokenExpiresAt    DateTime?      // Optional: QR-Code Ablaufdatum
  qrTokenLastUsed     DateTime?      // Letzter QR-Login für Audit
  
  // Security Fields
  loginAttempts       Int            @default(0)
  lockedUntil         DateTime?
  lastLoginAttempt    DateTime?
  lastPasswordChange  DateTime?
  
  // Email & 2FA
  emailVerified       Boolean        @default(false)
  emailVerifyToken    String?
  passwordResetToken  String?
  passwordResetExpiry DateTime?
  twoFactorSecret     String?
  twoFactorEnabled    Boolean        @default(false)
  
  // Timestamps
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  
  // Relations
  refreshTokens       RefreshToken[]
  approvedUsers       User[]         @relation("UserApprovals")
  managedProjects     Project[]      @relation("ProjectManager")
  createdProjects     Project[]      @relation("ProjectCreator")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model PasswordResetRequest {
  id          String    @id @default(uuid())
  email       String
  userId      String?
  status      String    @default("PENDING") // PENDING, RESOLVED, CANCELLED
  resolvedBy  String?
  resolvedAt  DateTime?
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("password_reset_requests")
}

model Project {
  id              String    @id @default(uuid())
  projectNumber   String    @unique // T208, T700, T207, T46
  name            String
  description     String?
  status          String    @default("PLANNED") // PLANNED, IN_PROGRESS, COMPLETED, ON_HOLD
  priority        String    @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  progress        Int       @default(0) // 0-100%
  
  // Plant Assignment - Projekt gehört zu einer Anlage
  plant           String?   // T208, T207, T700, T46 - null für anlage-übergreifend
  
  // Budget
  totalBudget     Float     @default(0)
  spentBudget     Float     @default(0)
  
  // Timeline
  startDate       DateTime?
  endDate         DateTime?
  
  // Manager & Creator
  managerId       String?
  manager         User?     @relation("ProjectManager", fields: [managerId], references: [id], onDelete: SetNull)
  createdBy       String
  creator         User      @relation("ProjectCreator", fields: [createdBy], references: [id])
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  tasks           Task[]
  files           File[]

  @@map("projects")
}

model Task {
  id              String    @id @default(uuid())
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  status          String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  priority        String    @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  assignedTo      String?   // User name or ID
  
  dueDate         DateTime?
  completedAt     DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("tasks")
}

model File {
  id              String    @id @default(uuid())
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  filename        String
  originalName    String
  fileType        String    // MIME type
  fileSize        Int       // in bytes
  filePath        String    // relative path in uploads folder
  
  uploadedBy      String?   // User name or ID
  uploadedAt      DateTime  @default(now())

  @@map("files")
}

model Action {
  id              String       @id @default(uuid())
  plant           String       // T208, T207, T700, T46
  category        String?      @default("ALLGEMEIN") // ALLGEMEIN, RIGMOVE
  title           String
  description     String?
  status          String       @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED
  priority        String       @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  assignedTo      String?      // User name or ID
  
  dueDate         DateTime?
  completedAt     DateTime?
  
  createdBy       String?      // User name or ID
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  actionFiles     ActionFile[]

  @@map("actions")
}

model ActionFile {
  id              String    @id @default(uuid())
  actionId        String
  action          Action    @relation(fields: [actionId], references: [id], onDelete: Cascade)
  
  filename        String
  originalName    String
  fileType        String    // MIME type (image/jpeg, application/pdf, etc.)
  fileSize        Int       // in bytes
  filePath        String    // relative path in uploads folder
  isPhoto         Boolean   @default(false) // true for photos, false for documents
  
  uploadedBy      String?   // User name or ID
  uploadedAt      DateTime  @default(now())

  @@map("action_files")
}

model Rig {
  id                String   @id @default(uuid())
  name              String   @unique // T700, T46, T350, etc.
  category          String   // Schwerlast, Mittlere Leistung, Kompakt
  
  // Technical Specifications
  maxDepth          Int      // in meters
  maxHookLoad       Int      // in tons
  footprint         String   // Klein, Mittel, Groß
  rotaryTorque      Int      // in Nm
  pumpPressure      Int      // in psi
  
  // Equipment Details (editierbar durch Admin)
  drawworks         String   // z.B. "2000 HP"
  mudPumps          String   // z.B. "2x 2200 HP Triplex"
  topDrive          String   // z.B. "1000 HP"
  derrickCapacity   String   // z.B. "1000 t"
  crewSize          String   // z.B. "45-50"
  mobilizationTime  String   // z.B. "30-45 Tage"
  
  // Pricing
  dayRate           String   // Tagesrate in EUR
  
  // Description
  description       String
  applications      String   // JSON array as string
  technicalSpecs    String
  
  // Audit
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastEditedBy      String?  // Admin user ID
  
  @@map("rigs")
}

model Equipment {
  id          String   @id @default(uuid())
  category    String   // drillPipe, tanks, power, camps, safety, mud, bop, cranes, misc
  name        String
  price       String   // Preis in EUR
  
  // Dynamic Properties (stored as JSON)
  properties  String   // JSON object with custom key-value pairs
  
  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // Admin user ID
  lastEditedBy String? // Admin user ID
  
  @@map("equipment")
}

model FailureReport {
  id              String   @id @default(uuid())
  plant           String   // T208, T207, T700, T46
  title           String
  description     String
  location        String?  // Genauer Ort auf der Anlage
  severity        String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  status          String   @default("REPORTED") // REPORTED, IN_REVIEW, CONVERTED_TO_ACTION, RESOLVED
  
  // Photo
  photoFilename   String?  // Dateiname des Fotos
  photoPath       String?  // Pfad zum Foto
  
  // Reporter Info
  reportedBy      String   // Email des Melders
  reportedByName  String   // Name des Melders
  
  // Conversion to Action
  convertedToActionId String? // ID der erstellten Action (falls konvertiert)
  convertedAt     DateTime?
  convertedBy     String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("failure_reports")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // FAILURE_REPORT, ACTION_ASSIGNED, ACTION_COMPLETED, COMMENT_MENTION, etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  
  // Optional metadata als JSON string
  metadata  String?  // JSON: { failureReportId, actionId, projectId, etc. }
  
  // Link to notification source
  relatedId String?  // ID of related entity (failureReport, action, etc.)
  
  createdAt DateTime @default(now())
  
  @@index([userId, isRead])
  @@map("notifications")
}

model ActionComment {
  id        String   @id @default(uuid())
  actionId  String
  userId    String
  text      String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([actionId])
  @@map("action_comments")
}

model ProjectComment {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  text      String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([projectId])
  @@map("project_comments")
}
